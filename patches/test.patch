--- a/src/freedreno/freedreno_noop.c
+++ b/src/freedreno/freedreno_noop.c
@@ -100,6 +100,12 @@
        .chip_id = CHIPID(6, 6, 0, 0xff),
        .gmem_size = 1024 * 1024 + 512 * 1024,
    },
+   {
+       .gpu_id = 710,
+       .chip_id = 0x07010000, /* Snapdragon 6 Gen 1 (Adreno 710) */
+       .gmem_size = 2 * 1024 * 1024,
+   },
+   /* Non-official support for Adreno 720 */
+   {
+       .gpu_id = 720,
+       .chip_id = 0x07200000,
+       .gmem_size = 2 * 1024 * 1024,
+   },

--- a/src/freedreno/freedreno_devices.py
+++ b/src/freedreno/freedreno_devices.py
@@ -600,6 +600,25 @@
     has_8bpp_ubwc = True,
 ))
 
+# Adreno 710 / 720 (non-official GMEM patch)
+add_gpus([
+    GPUId(710),
+    GPUId(720),
+], A6xxGPUInfo(
+    CHIP.A7XX,
+    template = a6xx_gen4,
+    num_ccu = 16,
+    gmem_align_w = 64,
+    gmem_align_h = 16,
+    tile_align_w = 64,
+    tile_align_h = 16,
+    tile_max_w = 2048,
+    tile_max_h = 2048,
+    num_vsc_pipes = 8,
+    gmem_ccu_color_cache_fraction = CCUColorCacheFraction.QUARTER.value,
+    has_gmem_fast_clear = True,
+    has_8bpp_ubwc = True,
+))

--- a/src/freedreno/vulkan/tu_cmd_buffer.cc
+++ b/src/freedreno/vulkan/tu_cmd_buffer.cc
@@ -50,6 +50,18 @@
 #include "tu_cs.h"
 #include "tu_private.h"
 
+/* Force GMEM override via env var FD_FORCE_GMEM */
+static bool tu_force_gmem = false;
+
+static void
+tu_read_env_force_gmem(void)
+{
+   const char *env = getenv("FD_FORCE_GMEM");
+   if (env && atoi(env)) {
+      tu_force_gmem = true;
+      fprintf(stderr, "TU_DEBUG: Forcing GMEM rendering (FD_FORCE_GMEM=1)\n");
+   }
+}
 
 /* Call this function during device init, e.g. in tu_device_init() */
 
@@ -300,7 +312,11 @@
    /* existing decision logic for gmem/sysmem */
-   bool gmem = use_gmem_rendering(...);
+   bool gmem = use_gmem_rendering(...);
+
+   if (tu_force_gmem) {
+      gmem = true;
+   }
 
    emit_rb_ccu_cntl(cs, gmem);
